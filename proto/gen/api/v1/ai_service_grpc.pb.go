// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/ai_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_GenerateContent_FullMethodName   = "/memos.api.v1.AIService/GenerateContent"
	AIService_ListChatSessions_FullMethodName  = "/memos.api.v1.AIService/ListChatSessions"
	AIService_GetChatSession_FullMethodName    = "/memos.api.v1.AIService/GetChatSession"
	AIService_UpdateChatSession_FullMethodName = "/memos.api.v1.AIService/UpdateChatSession"
	AIService_DeleteChatSession_FullMethodName = "/memos.api.v1.AIService/DeleteChatSession"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	// GenerateContent generates content from the AI.
	GenerateContent(ctx context.Context, in *GenerateContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenerateContentResponse], error)
	// ListChatSessions lists chat sessions for the current user.
	ListChatSessions(ctx context.Context, in *ListChatSessionsRequest, opts ...grpc.CallOption) (*ListChatSessionsResponse, error)
	// GetChatSession gets a specific chat session.
	GetChatSession(ctx context.Context, in *GetChatSessionRequest, opts ...grpc.CallOption) (*ChatSession, error)
	// UpdateChatSession updates a chat session.
	UpdateChatSession(ctx context.Context, in *UpdateChatSessionRequest, opts ...grpc.CallOption) (*UpdateChatSessionResponse, error)
	// DeleteChatSession deletes a chat session.
	DeleteChatSession(ctx context.Context, in *DeleteChatSessionRequest, opts ...grpc.CallOption) (*DeleteChatSessionResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) GenerateContent(ctx context.Context, in *GenerateContentRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenerateContentResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIService_ServiceDesc.Streams[0], AIService_GenerateContent_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenerateContentRequest, GenerateContentResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_GenerateContentClient = grpc.ServerStreamingClient[GenerateContentResponse]

func (c *aIServiceClient) ListChatSessions(ctx context.Context, in *ListChatSessionsRequest, opts ...grpc.CallOption) (*ListChatSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatSessionsResponse)
	err := c.cc.Invoke(ctx, AIService_ListChatSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GetChatSession(ctx context.Context, in *GetChatSessionRequest, opts ...grpc.CallOption) (*ChatSession, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatSession)
	err := c.cc.Invoke(ctx, AIService_GetChatSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) UpdateChatSession(ctx context.Context, in *UpdateChatSessionRequest, opts ...grpc.CallOption) (*UpdateChatSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateChatSessionResponse)
	err := c.cc.Invoke(ctx, AIService_UpdateChatSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) DeleteChatSession(ctx context.Context, in *DeleteChatSessionRequest, opts ...grpc.CallOption) (*DeleteChatSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChatSessionResponse)
	err := c.cc.Invoke(ctx, AIService_DeleteChatSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
type AIServiceServer interface {
	// GenerateContent generates content from the AI.
	GenerateContent(*GenerateContentRequest, grpc.ServerStreamingServer[GenerateContentResponse]) error
	// ListChatSessions lists chat sessions for the current user.
	ListChatSessions(context.Context, *ListChatSessionsRequest) (*ListChatSessionsResponse, error)
	// GetChatSession gets a specific chat session.
	GetChatSession(context.Context, *GetChatSessionRequest) (*ChatSession, error)
	// UpdateChatSession updates a chat session.
	UpdateChatSession(context.Context, *UpdateChatSessionRequest) (*UpdateChatSessionResponse, error)
	// DeleteChatSession deletes a chat session.
	DeleteChatSession(context.Context, *DeleteChatSessionRequest) (*DeleteChatSessionResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) GenerateContent(*GenerateContentRequest, grpc.ServerStreamingServer[GenerateContentResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateContent not implemented")
}
func (UnimplementedAIServiceServer) ListChatSessions(context.Context, *ListChatSessionsRequest) (*ListChatSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatSessions not implemented")
}
func (UnimplementedAIServiceServer) GetChatSession(context.Context, *GetChatSessionRequest) (*ChatSession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatSession not implemented")
}
func (UnimplementedAIServiceServer) UpdateChatSession(context.Context, *UpdateChatSessionRequest) (*UpdateChatSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatSession not implemented")
}
func (UnimplementedAIServiceServer) DeleteChatSession(context.Context, *DeleteChatSessionRequest) (*DeleteChatSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChatSession not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_GenerateContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateContentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIServiceServer).GenerateContent(m, &grpc.GenericServerStream[GenerateContentRequest, GenerateContentResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIService_GenerateContentServer = grpc.ServerStreamingServer[GenerateContentResponse]

func _AIService_ListChatSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).ListChatSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_ListChatSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).ListChatSessions(ctx, req.(*ListChatSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GetChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GetChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GetChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GetChatSession(ctx, req.(*GetChatSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_UpdateChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).UpdateChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_UpdateChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).UpdateChatSession(ctx, req.(*UpdateChatSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_DeleteChatSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChatSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).DeleteChatSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_DeleteChatSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).DeleteChatSession(ctx, req.(*DeleteChatSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "memos.api.v1.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChatSessions",
			Handler:    _AIService_ListChatSessions_Handler,
		},
		{
			MethodName: "GetChatSession",
			Handler:    _AIService_GetChatSession_Handler,
		},
		{
			MethodName: "UpdateChatSession",
			Handler:    _AIService_UpdateChatSession_Handler,
		},
		{
			MethodName: "DeleteChatSession",
			Handler:    _AIService_DeleteChatSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateContent",
			Handler:       _AIService_GenerateContent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/ai_service.proto",
}
