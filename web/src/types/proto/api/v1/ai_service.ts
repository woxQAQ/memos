// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/ai_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "memos.api.v1";

export interface ChatMessage {
  /** The role of the message. */
  role: string;
  /** The content of the message. */
  content: string;
  /** The timestamp when the message was created. */
  createdTime?: Date | undefined;
}

export interface ChatSession {
  /** The unique identifier for the session. */
  uid: string;
  /** The title of the session. */
  title: string;
  /** The timestamp when the session was created. */
  createdTime?:
    | Date
    | undefined;
  /** The timestamp when the session was last updated. */
  updatedTime?:
    | Date
    | undefined;
  /** The status of the session. */
  status: string;
  /** The messages in the session. */
  messages: ChatMessage[];
}

export interface GenerateContentRequest {
  /** The content of the request. */
  messages: ChatMessage[];
  /** Optional session UID to save the conversation. */
  sessionUid: string;
}

export interface GenerateContentResponse {
  /** The content of the response. */
  content: string;
}

export interface ListChatSessionsRequest {
  /** The maximum number of sessions to return. */
  pageSize: number;
  /** A page token from a previous call. */
  pageToken: string;
}

export interface ListChatSessionsResponse {
  /** The list of sessions. */
  sessions: ChatSession[];
  /** A token to retrieve the next page of results. */
  nextPageToken: string;
}

export interface GetChatSessionRequest {
  /** The UID of the session to retrieve. */
  uid: string;
}

export interface UpdateChatSessionRequest {
  /** The UID of the session to update. */
  uid: string;
  /** The new title of the session. */
  title: string;
}

export interface UpdateChatSessionResponse {
  /** The updated session. */
  session?: ChatSession | undefined;
}

export interface DeleteChatSessionRequest {
  /** The UID of the session to delete. */
  uid: string;
}

export interface DeleteChatSessionResponse {
}

function createBaseChatMessage(): ChatMessage {
  return { role: "", content: "", createdTime: undefined };
}

export const ChatMessage: MessageFns<ChatMessage> = {
  encode(message: ChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ChatMessage>): ChatMessage {
    return ChatMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatMessage>): ChatMessage {
    const message = createBaseChatMessage();
    message.role = object.role ?? "";
    message.content = object.content ?? "";
    message.createdTime = object.createdTime ?? undefined;
    return message;
  },
};

function createBaseChatSession(): ChatSession {
  return { uid: "", title: "", createdTime: undefined, updatedTime: undefined, status: "", messages: [] };
}

export const ChatSession: MessageFns<ChatSession> = {
  encode(message: ChatSession, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.createdTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createdTime), writer.uint32(26).fork()).join();
    }
    if (message.updatedTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedTime), writer.uint32(34).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    for (const v of message.messages) {
      ChatMessage.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatSession {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updatedTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.messages.push(ChatMessage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ChatSession>): ChatSession {
    return ChatSession.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatSession>): ChatSession {
    const message = createBaseChatSession();
    message.uid = object.uid ?? "";
    message.title = object.title ?? "";
    message.createdTime = object.createdTime ?? undefined;
    message.updatedTime = object.updatedTime ?? undefined;
    message.status = object.status ?? "";
    message.messages = object.messages?.map((e) => ChatMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGenerateContentRequest(): GenerateContentRequest {
  return { messages: [], sessionUid: "" };
}

export const GenerateContentRequest: MessageFns<GenerateContentRequest> = {
  encode(message: GenerateContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      ChatMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.sessionUid !== "") {
      writer.uint32(18).string(message.sessionUid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(ChatMessage.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sessionUid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateContentRequest>): GenerateContentRequest {
    return GenerateContentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateContentRequest>): GenerateContentRequest {
    const message = createBaseGenerateContentRequest();
    message.messages = object.messages?.map((e) => ChatMessage.fromPartial(e)) || [];
    message.sessionUid = object.sessionUid ?? "";
    return message;
  },
};

function createBaseGenerateContentResponse(): GenerateContentResponse {
  return { content: "" };
}

export const GenerateContentResponse: MessageFns<GenerateContentResponse> = {
  encode(message: GenerateContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content !== "") {
      writer.uint32(10).string(message.content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerateContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerateContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GenerateContentResponse>): GenerateContentResponse {
    return GenerateContentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerateContentResponse>): GenerateContentResponse {
    const message = createBaseGenerateContentResponse();
    message.content = object.content ?? "";
    return message;
  },
};

function createBaseListChatSessionsRequest(): ListChatSessionsRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListChatSessionsRequest: MessageFns<ListChatSessionsRequest> = {
  encode(message: ListChatSessionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChatSessionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChatSessionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListChatSessionsRequest>): ListChatSessionsRequest {
    return ListChatSessionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChatSessionsRequest>): ListChatSessionsRequest {
    const message = createBaseListChatSessionsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListChatSessionsResponse(): ListChatSessionsResponse {
  return { sessions: [], nextPageToken: "" };
}

export const ListChatSessionsResponse: MessageFns<ListChatSessionsResponse> = {
  encode(message: ListChatSessionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.sessions) {
      ChatSession.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChatSessionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChatSessionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessions.push(ChatSession.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListChatSessionsResponse>): ListChatSessionsResponse {
    return ListChatSessionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListChatSessionsResponse>): ListChatSessionsResponse {
    const message = createBaseListChatSessionsResponse();
    message.sessions = object.sessions?.map((e) => ChatSession.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetChatSessionRequest(): GetChatSessionRequest {
  return { uid: "" };
}

export const GetChatSessionRequest: MessageFns<GetChatSessionRequest> = {
  encode(message: GetChatSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetChatSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetChatSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetChatSessionRequest>): GetChatSessionRequest {
    return GetChatSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetChatSessionRequest>): GetChatSessionRequest {
    const message = createBaseGetChatSessionRequest();
    message.uid = object.uid ?? "";
    return message;
  },
};

function createBaseUpdateChatSessionRequest(): UpdateChatSessionRequest {
  return { uid: "", title: "" };
}

export const UpdateChatSessionRequest: MessageFns<UpdateChatSessionRequest> = {
  encode(message: UpdateChatSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateChatSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateChatSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateChatSessionRequest>): UpdateChatSessionRequest {
    return UpdateChatSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateChatSessionRequest>): UpdateChatSessionRequest {
    const message = createBaseUpdateChatSessionRequest();
    message.uid = object.uid ?? "";
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseUpdateChatSessionResponse(): UpdateChatSessionResponse {
  return { session: undefined };
}

export const UpdateChatSessionResponse: MessageFns<UpdateChatSessionResponse> = {
  encode(message: UpdateChatSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.session !== undefined) {
      ChatSession.encode(message.session, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateChatSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateChatSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.session = ChatSession.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UpdateChatSessionResponse>): UpdateChatSessionResponse {
    return UpdateChatSessionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateChatSessionResponse>): UpdateChatSessionResponse {
    const message = createBaseUpdateChatSessionResponse();
    message.session = (object.session !== undefined && object.session !== null)
      ? ChatSession.fromPartial(object.session)
      : undefined;
    return message;
  },
};

function createBaseDeleteChatSessionRequest(): DeleteChatSessionRequest {
  return { uid: "" };
}

export const DeleteChatSessionRequest: MessageFns<DeleteChatSessionRequest> = {
  encode(message: DeleteChatSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChatSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChatSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteChatSessionRequest>): DeleteChatSessionRequest {
    return DeleteChatSessionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteChatSessionRequest>): DeleteChatSessionRequest {
    const message = createBaseDeleteChatSessionRequest();
    message.uid = object.uid ?? "";
    return message;
  },
};

function createBaseDeleteChatSessionResponse(): DeleteChatSessionResponse {
  return {};
}

export const DeleteChatSessionResponse: MessageFns<DeleteChatSessionResponse> = {
  encode(_: DeleteChatSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteChatSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteChatSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteChatSessionResponse>): DeleteChatSessionResponse {
    return DeleteChatSessionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteChatSessionResponse>): DeleteChatSessionResponse {
    const message = createBaseDeleteChatSessionResponse();
    return message;
  },
};

export type AIServiceDefinition = typeof AIServiceDefinition;
export const AIServiceDefinition = {
  name: "AIService",
  fullName: "memos.api.v1.AIService",
  methods: {
    /** GenerateContent generates content from the AI. */
    generateContent: {
      name: "GenerateContent",
      requestType: GenerateContentRequest,
      requestStream: false,
      responseType: GenerateContentResponse,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              24,
              58,
              1,
              42,
              34,
              19,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    /** ListChatSessions lists chat sessions for the current user. */
    listChatSessions: {
      name: "ListChatSessions",
      requestType: ListChatSessionsRequest,
      requestStream: false,
      responseType: ListChatSessionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              21,
              18,
              19,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** GetChatSession gets a specific chat session. */
    getChatSession: {
      name: "GetChatSession",
      requestType: GetChatSessionRequest,
      requestStream: false,
      responseType: ChatSession,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              18,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              123,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** UpdateChatSession updates a chat session. */
    updateChatSession: {
      name: "UpdateChatSession",
      requestType: UpdateChatSessionRequest,
      requestStream: false,
      responseType: UpdateChatSessionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              30,
              58,
              1,
              42,
              50,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              123,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
    /** DeleteChatSession deletes a chat session. */
    deleteChatSession: {
      name: "DeleteChatSession",
      requestType: DeleteChatSessionRequest,
      requestStream: false,
      responseType: DeleteChatSessionResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              42,
              25,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              97,
              105,
              47,
              115,
              101,
              115,
              115,
              105,
              111,
              110,
              115,
              47,
              123,
              117,
              105,
              100,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
